<!--

    Copyright 2014 Internet2

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!-- $Id$ -->

<project name="Grouper" default="compile" basedir=".">

  <!-- ant contrib allows conditionals in the ant scripts -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="${basedir}/lib/ant/ant-contrib-1.0b3.jar" />
    </classpath>
  </taskdef>
  
  <!-- PROPERTIES -->
   <property name="grouper.home"  value="${basedir}${file.separator}"/>
  <!-- Grouper Distribution and Versioning Properties -->
  <property name="app.name"     value="grouper"/>
  <property name="impl.url"     value="https://www.internet2.edu/products-services/trust-identity/grouper/"/>
  <property name="impl.vendor"  value="Internet2"/>
  <property name="spec.title"   value="Grouper API"/>

  <!-- copy build.properties if not there already -->
  <if><not><available file="build.properties" /></not>
    <then><copy file="build.example.properties" tofile="build.properties" /></then>
  </if> 


  <!-- Grouper Global Build Properties -->
  <property file="${basedir}/build.properties"/>

  <!-- validate the build.properties -->
  <!-- fail message="Couldnt detect build.properties property file entry (it's probably new, copy the entry from build.example.properties): resources.dir" unless="resources.dir" / -->
  
  <property file="${basedir}/misc/version.properties"/>

  <property name="dist.binary" value="${dist.dir}/binary"/>
  
  <if><not><available file="${conf.dir}/grouper.properties" /></not>
    <then><copy file="misc/grouper.example.properties" 
      tofile="${conf.dir}/grouper.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/morphString.properties" /></not>
    <then><copy file="misc/morphString.example.properties" 
      tofile="${conf.dir}/morphString.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/grouper.client.properties" /></not>
    <then><copy file="misc/grouper.client.example.properties" 
      tofile="${conf.dir}/grouper.client.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/grouper.hibernate.properties" /></not>
    <then><copy file="misc/grouper.hibernate.example.properties" 
      tofile="${conf.dir}/grouper.hibernate.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/grouper-loader.properties" /></not>
    <then><copy file="misc/grouper-loader.example.properties" 
      tofile="${conf.dir}/grouper-loader.properties" /></then>
  </if> 
  <if><not><available file="conf/grouper-ui.properties" /></not>
    <then><copy file="misc/grouper-ui.example.properties" 
      tofile="conf/grouper-ui.properties" /></then>
  </if> 
  <if><not><available file="conf/grouper-ws.properties" /></not>
    <then><copy file="misc/grouper-ws.example.properties" 
      tofile="conf/grouper-ws.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/log4j.properties" /></not>
    <then><copy file="${conf.dir}/log4j.example.properties" 
      tofile="${conf.dir}/log4j.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/morphString.properties" /></not>
    <then><copy file="misc/morphString.example.properties" 
      tofile="${conf.dir}/morphString.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/server.properties" /></not>
    <then><copy file="${conf.dir}/server.example.properties" 
      tofile="${conf.dir}/server.properties" /></then>
  </if> 
	  <if><not><available file="${conf.dir}/grouper.cache.properties" /></not>
	    <then><copy file="misc/grouper.cache.example.properties" 
	      tofile="${conf.dir}/grouper.cache.properties" /></then>
	  </if> 
  <if><not><available file="${conf.dir}/subject.properties" /></not>
    <then><copy file="misc/subject.example.properties" 
      tofile="${conf.dir}/subject.properties" /></then>
  </if> 
  <if><not><available file="conf/grouperText/grouper.text.en.us.properties" /></not>
    <then><copy file="misc/grouper.text.en.us.example.properties" 
      tofile="conf/grouperText/grouper.text.en.us.properties" /></then>
  </if> 
  <if><not><available file="${conf.dir}/spy.properties" /></not>
    <then><copy file="${conf.dir}/spy.example.properties" 
      tofile="${conf.dir}/spy.properties" /></then>
  </if>
  
  <!-- TARGETS -->

  <!-- target: clean -->
  <target name="clean" 
          description="Clean out (delete) previous build products including Java classes, the Grouper dist directory, and log files"
  >
    <delete dir="${build.dir}"/>  
    <delete dir="${dist.dir}"/>
    <delete>
      <fileset dir="${basedir}" includes="*.log"/>
      <fileset dir="${basedir}" includes="*.log.?"/>
    </delete>
  </target>
  <!-- target: clean -->
  
  <!-- target: compile -->
  <target name="compile" 
          description="Compile .java files, copy Hibernate mapping files"
          depends="init.conf"
  >
    <record name="${build.log}" action="start"/>
    <mkdir  dir="${build.dir.grouper}"/>
    <javac  srcdir="${src.dir.grouper}" 
            destdir="${build.dir.grouper}"
            debug="true"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}"
            source="8"
            target="8"
    >
      <classpath refid="project.classpath" />
<!--  TODO 20061011 I'll eventually have to deal with this migration
      <compilerarg  value="-Xlint:unchecked"  />
-->
    </javac>

  	<!-- CH 20080215 copy source to the build dir... -->    
    <copy todir="${build.dir.grouper}">
      <fileset dir="${src.dir.grouper}">
        <include name="**/*.java"/>      <!-- source -->
        <include name="**/*.hbm.xml"/>      <!-- hibernate mappings -->
        <include name="**/*.properties"/>   <!-- xml default export|import properties -->
      </fileset>
    </copy>
    <record name="${build.log}" action="stop"/>
  </target>
  <!-- target: compile -->

  <target name="tarball" description="build tar gz on internet2 box">
  
    <copy todir="${basedir}/../grouper.api-${version}">
      <fileset dir="${basedir}/../grouper" />
    </copy>
    
    <fixcrlf srcdir="${basedir}/../grouper.api-${version}/bin" eol="unix" includes="*.sh" />
    <fixcrlf srcdir="${basedir}/../grouper.api-${version}/bin" eol="dos" includes="*.bat" />
    <chmod dir="${basedir}/../grouper.api-${version}/bin" includes="*.sh,*.bat" perm="ugo+rx"/>

    <copy file="${basedir}/../grouper.api-${version}/bin/gsh.sh" tofile="${basedir}/../grouper.api-${version}/bin/gsh" />
    <fixcrlf srcdir="${basedir}/../grouper.api-${version}/bin" eol="unix" includes="gsh" />
    <chmod dir="${basedir}/../grouper.api-${version}/bin" includes="gsh" perm="ugo+rx"/>

    <!-- this assumes that everything was checked out to the right place, and no other dirs exist -->
    <tar destfile="${basedir}/../grouper.api-${version}.tar.gz" compression="gzip" longfile="gnu" >
      <tarfileset dir="${basedir}/.." >
        <include name="grouper.api-${version}/**"/>
      </tarfileset>
    </tar>            
    
  </target>

  <!-- target: jar -->
  <target name="jar" 
          depends="compile, test.compile" 
          description="Create Grouper API jar"
  >
    <mkdir dir="${dist.dir}/lib"/>
    <!-- keep this in the jar so we know where it is -->
    <copy file="${basedir}/misc/version.properties" 
      tofile="${build.dir.grouper}/grouper.version.properties" />
    <copy file="${basedir}/misc/grouper.cache.example.properties" 
      tofile="${build.dir.grouper}/grouper.cache.properties" />
    <copy file="misc/grouper.example.properties" 
      todir="${build.dir.grouper}" />
    <copy file="misc/grouper.hibernate.example.properties" 
      todir="${build.dir.grouper}" />
    <copy file="misc/grouper-loader.example.properties" 
      todir="${build.dir.grouper}" />
    <tstamp>
       <format property="the.timestamp" pattern="yyyy/MM/dd HH:mm:ss Z" />
    </tstamp>
    <jar destfile="${dist.dir}/lib/${app.name}-${DSTAMP}.jar" basedir="${build.dir.grouper}">
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Specification-Title"     value="${spec.title}"/>
        <attribute name="Implementation-Vendor"   value="${impl.vendor}"/>
        <attribute name="Implementation-Title"    value="${app.name}"/>
        <attribute name="Implementation-Version"  value="${version}"/>
        <attribute name="Implementation-URL"      value="${impl.url}"/>
        <attribute name="Build-Timestamp"         value="${the.timestamp}"/>
      </manifest>
      <fileset dir="misc">
        <include name="META-INF/*" />
      </fileset>
      <fileset dir="misc">
        <include name="META-INF/*" />
      </fileset>
    </jar>
    <copy file="${dist.dir}/lib/${app.name}-${DSTAMP}.jar"   
          tofile="${dist.dir}/lib/${app.name}.jar" 
    />
    
    
    <mkdir dir="${dist.dir}/lib/test"/>
        
    <!-- we need a jar for test code -->
    <jar destfile="${dist.dir}/lib/test/grouper-test.jar">
      <manifest>
        <attribute name="Built-By"                value="${user.name}"/>
        <attribute name="Implementation-Vendor"   value="${impl.vendor}"/>
        <attribute name="Implementation-Title"    value="${app.name}"/>
        <attribute name="Implementation-Version"  value="${version}"/>
        <attribute name="Implementation-URL"      value="${impl.url}"/>
      </manifest>
      <fileset dir="${build.dir.test}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${src.dir.test}">
        <include name="**/*"/>
        <exclude name="conf/**"/>
      </fileset>
      <fileset dir="conf">
        <include name="grouperRulesEmailTemplates/test*"/>
      </fileset>
    </jar>
  </target>
  <!-- target: jar -->

  <!-- target: init -->
  <target name="init">
    <tstamp/>
    <mkdir dir="${build.dir.test}"/>
    
    <!-- only define our classpath once -->
    <path id="project.classpath">
      <!-- for configuration files -->
      <pathelement location="${conf.dir}"/>
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
      <!--<fileset dir="dist/lib">
        <include name="**/*.jar"/>
      </fileset>-->
      <pathelement  location="${build.dir.grouper}"/>
      <pathelement  location="${build.dir.test}"/>
      <pathelement  location="${user.home}/.ant/lib/clover.jar"/>
      <pathelement path="${java.class.path}"/>
    </path>
  	
  	<pathconvert  targetos="unix"
                  property="project.classpath.string" 
                  refid="project.classpath"
    />
  	
   <path id="test.classpath">
     <pathelement location="confForTest"/>
     <path refid="project.classpath"/>
   </path>
  	
   <pathconvert  targetos="unix"
                  property="test.classpath.string" 
                  refid="test.classpath"
    />
    

    <!-- fix line endings and permissions of scripts -->
    <fixcrlf srcdir="bin" eol="unix" includes="*.sh" />
    <fixcrlf srcdir="bin" eol="unix" includes="gsh" />
    <fixcrlf srcdir="bin" eol="dos" includes="*.bat" />
    <chmod dir="bin" includes="*.sh,*.bat,gsh" perm="ugo+rx"/>

  </target>
  <!-- target: init -->

  <!-- target: init.conf -->
  <!-- expands macros in several configuration files to set proper absolute paths -->
  <target name="init.conf"
          depends="init"
  >
    <dirname property="base" file="build.xml"/>
    <pathconvert  targetos="unix"
                  property="converted.base"
    >
        <path path="${base}"/>
    </pathconvert>

    <!-- see if grouper.properties is there -->
    <condition property="configfile" value="${conf.dir}/grouper.properties" 
        else="${conf.dir}/grouper.example.properties">
      <available file="${conf.dir}/grouper.properties" type="file"/>
    </condition>
    
    <!-- if grouper.properties is there, copy it to itself, if not, get the example -->
    <copy tofile="${conf.dir}/grouper.properties" file="${configfile}" verbose="true" />
    
    <!-- see if morphString.properties is there -->
    <condition property="morphStringConfigfile" value="${conf.dir}/morphString.properties" 
        else="${conf.dir}/morphString.example.properties">
      <available file="${conf.dir}/morphString.properties" type="file"/>
    </condition>
    
    <!-- if morphString.properties is there, copy it to itself, if not, get the example -->
    <copy tofile="${conf.dir}/morphString.properties" file="${morphStringConfigfile}" verbose="true" />
    
    <!-- see if server.properties is there -->
    <condition property="serverConfigfile" value="${conf.dir}/server.properties" 
        else="${conf.dir}/server.example.properties">
      <available file="${conf.dir}/server.properties" type="file"/>
    </condition>
    
    <!-- if server.properties is there, copy it to itself, if not, get the example -->
    <copy tofile="${conf.dir}/server.properties" file="${serverConfigfile}" verbose="true" />

  </target>
  <!-- target: init.conf -->

  <!-- target: test -->
  <target name="test"
          depends="test.compile"
          description="Run Grouper Tests"
  >
    <echo/>
    <echo message="*** results can be found in ${dist.dir.test} ***"/>
    <echo/>
    <record name="${test.log}" action="start" append="yes"/>
    <mkdir dir="${dist.dir.test}"/>
    <!-- prompt the user -->
    <java fork="false"
              maxmemory="${memory.max}"
              classpathref="test.classpath"
              classname="edu.internet2.middleware.grouper.util.ConfirmDbChangePromptOnly"
              failonerror="true"
        >
       <sysproperty key="grouper.home" value="${grouper.home}"/>
        <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=4001,suspend=y"/>
        </java>
    
    <input validargs="y,n"
        addproperty="do.sql"
      />
      <condition property="do.abort.sql">
        <equals arg1="n" arg2="${do.sql}"/>
      </condition>
      <fail if="do.abort.sql">Build aborted by user.</fail>

    <junit  fork="yes"
            haltonerror="yes"
            haltonfailure="yes"
            maxmemory="${memory.max}"
            printsummary="withOutAndErr"
            showoutput="yes"
    >
      <jvmarg value="-Dgrouper.allow.db.changes=true"/>
      <jvmarg value="-Dgrouper.home=${grouper.home}"/>
      <classpath  refid="test.classpath"/>
      <formatter  type="xml"/>
      <test       name="edu.internet2.middleware.grouper.AllTests"
                  todir="${dist.dir.test}" 
      />
    </junit>
    <!-- TODO 20061228 Switch to batchtest once I've migrated the tests
          <batchtest  fork="yes"
                      todir="${dist.dir.test}"
          >
            <formatter  type="xml"/>
            <fileset    dir="${src.dir.test}">
              <include  name="**/Test*.java"/>
              <exclude  name="**/Suite*.java"/>
            </fileset>  
          </batchtest>
    -->
    <record name="${test.log}" action="stop"/>
  </target>
  <!-- target: test -->

  <!-- target: test.compile -->
  <target name="test.compile"
          depends="init, compile"
  >
    <record name="${test.log}" action="start" append="yes"/>
    <javac srcdir="${src.dir.test}" destdir="${build.dir.test}" debug="true"
      source="8" target="8">
      <classpath  refid="test.classpath"/>
      <include name="**/*.java" />
    </javac>
    <copy todir="${build.dir.test}">
      <fileset dir="${src.dir.test}">
        <include name="**/*.gsh"/>      <!-- source -->
      </fileset>
   </copy>
    <record name="${test.log}" action="stop"/>
  </target>
  <!-- target: test.compile -->

</project>

